{"version":3,"sources":["components/Header/index.style.js","components/Header/index.js","components/MovieList/index.style.js","components/MovieList/index.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyle","styled","div","Header","MovieWrapper","ButtonWrapper","button","props","selected","MovieList","useState","movies","movieList","setMovieList","submitterFilter","setSubmitterFilter","seenFilter","setSeenFilter","uniqueSubmitters","map","m","submitter","filter","s","idx","indexOf","focusedMovie","queue","useEffect","watched","handleSubmitterFilter","e","target","value","Grid","container","spacing","alignItems","item","xs","length","src","poster","height","alt","title","overview","onClick","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4121a6e.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const HeaderStyle = styled.div`\r\n  margin: auto;\r\n  width: 50%;\r\n  padding: 10px;\r\n`;\r\n","import React from \"react\";\r\nimport { HeaderStyle } from \"./index.style\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <HeaderStyle>\r\n      <h1>Heyo Dishcord! (Specifically, #film)</h1>\r\n      <h4>\r\n        (Dish is in no way associated with this app, by the way. I just made it\r\n        for fun.)\r\n      </h4>\r\n      <p>\r\n        Every week (ish), we try to coordinate movie nights where we all gather\r\n        together virtually to watch a movie in the Discord. Below are all the\r\n        movies on the list.\r\n      </p>\r\n    </HeaderStyle>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MovieWrapper = styled.div`\r\n  margin: auto;\r\n  width: 50%;\r\n  padding: 10px;\r\n\r\n  h2 span {\r\n    background-color: #fdd0f1;\r\n    border-radius: 4px;\r\n    padding: 0.1em 0.2em;\r\n    color: #72bbb4;\r\n  }\r\n`;\r\nexport const ButtonWrapper = styled.button`\r\n  background-color: ${(props) => (props.selected ? \"$ffffff\" : \"#fdd0f1\")};\r\n  border-radius: 8px;\r\n  border: 1px;\r\n  font-size: 20px;\r\n  font-style: italic;\r\n  margin: 0.5em 0.25em;\r\n  padding: 0.25em 1em;\r\n  &.active,\r\n  &.visited {\r\n    border: 0;\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MovieWrapper, ButtonWrapper } from \"./index.style\";\r\nimport movies from \"./movies\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst MovieList = () => {\r\n  // Hooks\r\n  const [movieList, setMovieList] = useState(movies);\r\n  const [submitterFilter, setSubmitterFilter] = useState(null);\r\n  const [seenFilter, setSeenFilter] = useState(null);\r\n  const uniqueSubmitters = movies\r\n    .map((m) => m.submitter)\r\n    .filter((s, idx) => movies.map((m) => m.submitter).indexOf(s) === idx);\r\n  const focusedMovie = movies.filter((m) => m.queue);\r\n\r\n  // useEffect pog\r\n  useEffect(() => {\r\n    if (seenFilter != null && submitterFilter != null) {\r\n      setMovieList(\r\n        movies.filter(\r\n          (m) =>\r\n            (seenFilter ? m.watched : !m.watched) &&\r\n            m.submitter === submitterFilter\r\n        )\r\n      );\r\n    } else {\r\n      if (seenFilter != null) {\r\n        setMovieList(\r\n          movies.filter((m) => (seenFilter ? m.watched : !m.watched))\r\n        );\r\n      } else if (submitterFilter != null) {\r\n        setMovieList(\r\n          movies.filter((m) => (seenFilter ? m.watched : !m.watched))\r\n        );\r\n      }\r\n    }\r\n  }, [submitterFilter, seenFilter]);\r\n\r\n  // Handlers\r\n  const handleUnseenFilter = () => {\r\n    setSeenFilter(false);\r\n  };\r\n  const handleWatchedFilter = () => {\r\n    setSeenFilter(true);\r\n  };\r\n  const handleClearFilters = () => {\r\n    setSeenFilter(null);\r\n    setSubmitterFilter(null);\r\n    setMovieList(movies);\r\n  };\r\n  const handleSubmitterFilter = (e) => {\r\n    setSubmitterFilter(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <MovieWrapper>\r\n      <Grid container spacing={3} alignItems=\"center\">\r\n        <Grid item xs={6}>\r\n          <center>\r\n            <h2>\r\n              <span>Movies Seen</span>\r\n            </h2>\r\n            <h1>{movies.filter((m) => m.watched).length}</h1>\r\n          </center>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <center>\r\n            <h2>\r\n              <span>Movies Unseen</span>\r\n            </h2>\r\n            <h1>{movies.filter((m) => !m.watched).length}</h1>\r\n          </center>\r\n        </Grid>\r\n      </Grid>\r\n      {focusedMovie && (\r\n        <div>\r\n          <h2>\r\n            <span>Up Next</span>\r\n          </h2>\r\n          <Grid container spacing={12}>\r\n            <Grid item xs={4}>\r\n              <img src={focusedMovie[0].poster} height={300} alt=\"hello\" />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <h1>{focusedMovie[0].title}</h1>\r\n              <h3>Submitted By: {focusedMovie[0].submitter}</h3>\r\n              <p>{focusedMovie[0].overview}</p>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <h2>\r\n          <span>Filter by Seen</span>\r\n        </h2>\r\n        <ButtonWrapper onClick={handleClearFilters}>All</ButtonWrapper>\r\n        <ButtonWrapper onClick={handleWatchedFilter}>Seen</ButtonWrapper>\r\n        <ButtonWrapper onClick={handleUnseenFilter}>Unseen</ButtonWrapper>\r\n      </div>\r\n      <div>\r\n        <h2>\r\n          <span>Filter By Contributor</span>\r\n        </h2>\r\n        {uniqueSubmitters.map((m) => (\r\n          <ButtonWrapper onClick={handleSubmitterFilter} value={m}>\r\n            {m}\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n      {seenFilter !== submitterFilter && (\r\n        <h4>\r\n          {seenFilter !== null && <span>Seen: {seenFilter.toString()}</span>}{\" \"}\r\n          {submitterFilter !== null && (\r\n            <span>Submitter: {submitterFilter}</span>\r\n          )}\r\n        </h4>\r\n      )}\r\n      <br />\r\n      <br />\r\n      {movieList.length === 0 && (\r\n        <p>No movies found with the chosen filters.</p>\r\n      )}\r\n      <Grid container spacing={3}>\r\n        {movieList.map((m) => (\r\n          <Grid container item xs={4}>\r\n            <img src={m.poster} height={300} alt={m.title} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </MovieWrapper>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MovieList from \"./components/MovieList\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MovieList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}