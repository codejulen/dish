{"version":3,"sources":["components/Header/index.style.js","components/Header/index.js","components/MovieList/index.style.js","components/MovieList/index.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyle","styled","div","Header","MovieWrapper","button","props","selected","MovieList","Grid","container","spacing","direction","justify","alignItems","movies","map","m","item","xs","sm","height","width","src","poster","alt","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"khtBAEO,IAAMA,EAAcC,IAAOC,IAAV,KCiBTC,EAhBO,WACpB,OACE,kBAACH,EAAD,KACE,0DACA,iHAIA,4J,meCTC,IAAMI,EAAeH,IAAOC,IAAV,K,GAKHD,IAAOI,OAAV,KACG,SAACC,GAAD,OAAYA,EAAMC,SAAW,UAAY,aAapCN,IAAOC,IAAV,K,eCOTM,EAvBG,WAChB,OACE,kBAACJ,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UAEVC,EAAOC,KAAI,SAACC,GAAD,OACV,kBAACR,EAAA,EAAD,CAAMC,WAAS,EAACQ,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGT,QAAS,GAC1C,kBAACF,EAAA,EAAD,CAAMY,OAAQ,IAAKC,MAAO,IAAKZ,WAAS,EAACC,QAAS,GAEhD,yBAAKY,IAAKN,EAAEO,OAAQH,OAAQ,IAAKI,IAAKR,EAAES,gBCNvCC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.820e040c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const HeaderStyle = styled.div`\r\n  margin: auto;\r\n  width: 50%;\r\n  padding: 10px;\r\n`;\r\n","import React from \"react\";\r\nimport { HeaderStyle } from \"./index.style\";\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <HeaderStyle>\r\n      <h1>Hello, friends of dishrag!</h1>\r\n      <h3>\r\n        (Dish is in no way associated with this app, by the way. I just made it\r\n        for fun.)\r\n      </h3>\r\n      <p>\r\n        Every week (ish), we try to coordinate movie nights where we all gather\r\n        together virtually to watch a movie in the Discord.\r\n      </p>\r\n    </HeaderStyle>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MovieWrapper = styled.div`\r\n  margin: auto;\r\n  width: 50%;\r\n  padding: 10px;\r\n`;\r\nexport const Button = styled.button`\r\n  background-color: ${(props) => (props.selected ? \"$ffffff\" : \"#fdd0f1\")};\r\n  border-radius: 8px;\r\n  border: 1px;\r\n  font-size: 24px;\r\n  font-style: italic;\r\n  margin: 0.5em 1em;\r\n  padding: 0.25em 1em;\r\n  &.active,\r\n  &.visited {\r\n    border: 0;\r\n  }\r\n`;\r\n\r\nexport const GridWrapper = styled.div`\r\n  width: 200px;\r\n`;\r\n","import React from \"react\";\r\nimport { MovieWrapper } from \"./index.style\";\r\nimport movies from \"./movies\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst MovieList = () => {\r\n  return (\r\n    <MovieWrapper>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {movies.map((m) => (\r\n          <Grid container item xs={6} sm={3} spacing={3}>\r\n            <Grid height={140} width={100} container spacing={3}>\r\n              {/* <Paper>{m.title}</Paper> */}\r\n              <img src={m.poster} height={300} alt={m.title} />\r\n            </Grid>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </MovieWrapper>\r\n  );\r\n};\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MovieList from \"./components/MovieList\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MovieList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}